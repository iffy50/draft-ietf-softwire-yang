<?xml version="1.0" encoding="US-ASCII"?>
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc autobreaks="no"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-softwire-yang-02" ipr="trust200902">
  <front>
    <title abbrev="YANG for A+P Softwires">A YANG Data Model for IPv4-in-IPv6
    A+P Softwires</title>

    <author fullname="Qi Sun" initials="Q." surname="Sun">
      <organization>Tsinghua University</organization>

      <address>
        <postal>
          <street></street>

          <city>Beijing</city>

          <code>100084</code>

          <country>P.R. China</country>
        </postal>

        <phone>+86-10-6278-5822</phone>

        <email>sunqi.ietf@gmail.com</email>
      </address>
    </author>

    <author fullname="Hao Wang" initials="H." surname="Wang">
      <organization>Tsinghua University</organization>

      <address>
        <postal>
          <street></street>

          <city>Beijing</city>

          <code>100084</code>

          <country>P.R. China</country>
        </postal>

        <phone>+86-10-6278-5822</phone>

        <email>wangh13@mails.tsinghua.edu.cn</email>
      </address>
    </author>

    <author fullname="Yong Cui" initials="Y." surname="Cui">
      <organization>Tsinghua University</organization>

      <address>
        <postal>
          <street></street>

          <city>Beijing</city>

          <code>100084</code>

          <country>P.R. China</country>
        </postal>

        <phone>+86-10-6260-3059</phone>

        <email>yong@csnet1.cs.tsinghua.edu.cn</email>
      </address>
    </author>

    <author fullname="Ian Farrer" initials="I." surname="Farrer">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <postal>
          <street>CTO-ATI,Landgrabenweg 151</street>

          <city>Bonn</city>

          <region>NRW</region>

          <code>53227</code>

          <country>Germany</country>
        </postal>

        <email>ian.farrer@telekom.de</email>
      </address>
    </author>

    <author fullname="Sladjana Zechlin" initials="S." surname="Zechlin">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <postal>
          <street>Landgrabenweg 151</street>

          <city>Bonn</city>

          <region>NRW</region>

          <code>53227</code>

          <country>Germany</country>
        </postal>

        <email>sladjana.zechlin@telekom.de</email>
      </address>
    </author>

    <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
      <organization>Orange</organization>

      <address>
        <postal>
          <street></street>

          <city>Rennes</city>

          <region></region>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Rajiv Asati" initials="R." surname="Asati">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>7025 Kit Creek Rd.</street>

          <city>RTP</city>

          <region>NC</region>

          <code>27709</code>

          <country>USA</country>
        </postal>

        <email>Rajiva@cisco.com</email>
      </address>
    </author>

    <date year="" />

    <workgroup>Softwire Working Group</workgroup>

    <abstract>
      <t>This document defines YANG data models for the configuration and
      operation of IPv4-in-IPv6 softwire Border Relays and Customer Premises
      Equipment. The model covers the Lightweight 4over6, MAP-E, and MAP-T
      softwire mechanisms.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </note>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>The IETF Softwire Working Group has developed several IPv4-in-IPv6
      softwire mechanisms to address various deployment contexts and
      constraints. As a companion to the architectural specification
      documents, this document focuses on the provisioning of A+P softwire
      functional elements: Border Routers (BRs) and Customer Premises
      Equipment (CEs). The softwire mechanisims covered in this document are
      Lightweight 4 over 6 <xref target="RFC7596"></xref>, MAP-E <xref
      target="RFC7597"></xref>, and MAP-T <xref target="RFC7599"></xref>.</t>

      <t>This document defines YANG data models <xref target="RFC6020"></xref>
      that can be used to configure and manage A+P softwire elements using the
      NETCONF protocol <xref target="RFC6241"></xref>.</t>

      <section anchor="terminology" title="Terminology">
        <t>The reader should be familiar with the concepts and terms defined
        in <xref target="RFC7596"></xref>, <xref target="RFC7597"></xref>,
        <xref target="RFC7599"></xref>, and the YANG data modelling language
        defined in <xref target="RFC6020"></xref> and <xref
        target="RFC7950"></xref>.</t>

        <t>The meaning of the symbols in tree diagrams is defined in <xref
        target="I-D.ietf-netmod-yang-tree-diagrams"></xref>.</t>
      </section>
    </section>

    <section anchor="overview" title="Overview of the Models">
      <t>The document defines these two YANG data modules for the
      configuration and monitoring of softwire functions:</t>

      <t><list hangIndent="22" style="hanging">
          <t hangText="ietf-softwire-ce">Provides configuration and
          monititoring for softwire CE element.</t>

          <t hangText="ietf-softwire-br">Provides configuration and
          monititoring for softwire BR element.</t>
        </list></t>

      <t>In addition, the following module is also defined:</t>

      <t><list hangIndent="22" style="hanging">
          <t hangText="ietf-softwire-common">Contains groups of functions that
          are common and are imported into the CE and BR modules.</t>
        </list></t>

      <t>This approach has been taken so that the various modules can be
      easily extended to support additional softwire mechanisms, if
      required.</t>

      <t>The modules are defined as augments to the interface YANG module
      <xref target="RFC7223"></xref>.</t>

      <t>Within the BR and CE modules, the YANG "feature" statement is used to
      distinguish which of the different softwire mechanism(s) is relevant for
      a specific element's configuraiton. For each module, a choice statement
      is included for either 'binding' or 'algorithmic'. Binding is used for
      configuring Lightweight 4over6 or MAP1:1 (with PSID) softwires
      (described in <xref target="RFC7597"></xref> Appendix A Example 5).
      Algorithmic is used for MAP-T or MAP-E 'mesh' (no PSID)
      configuration.</t>

      <t>In the 'algo-instances' container, a choice statement is included to
      specify MAP-E (encapsulation) or MAP-T (translation). The following
      table shows the how these choices are used to indicate the desired
      softwire mechanism:</t>

      <texttable anchor="table_s46_mechanism_choices"
                 title="Softwire Mechanism Choice Statement Enumeration">
        <ttcol align="center">S46 Mechanism</ttcol>

        <ttcol align="center">ce-type?</ttcol>

        <ttcol align="center">data-plane?</ttcol>

        <c>Lightweight 4over6 / MAP-E1:1</c>

        <c>binding</c>

        <c>n/a</c>

        <c>MAP-E Mesh</c>

        <c>algorithm</c>

        <c>encapsulation</c>

        <c>MAP-T</c>

        <c>algorithm</c>

        <c>translation</c>
      </texttable>

      <t>NETCONF notifications also included.<list style="empty">
          <t>Note: Earlier versions of this document combined the softwire
          mechanisms by their associated technologies rather than their
          function in the architecture. As the document was revised, it became
          apparent that dividing the modules by by their role in the
          architecture (CE or BR) was a better approach as this follows the
          intended function and existing implmemention approaches more
          closely.</t>
        </list></t>

      <section title="Additional Configuration">
        <t>The softwire module only aims to provide configuration relevant for
        softwires. In order to fully configure a CE element it is also
        necessary to consider:</t>

        <t><list style="symbols">
            <t>IPv4 routing configuration, to add an IPv4 destination
            prefix(es) reachable via the configured softwire.</t>

            <t>NAT44 configuration, required by softwire encapsulation based
            mechanisms. This includes an external IPv4 address and optionally
            a port set.</t>

            <t>Stateless NAT46 configuration, required by softwire translation
            based mechanisms (i.e. the assignment of a Network-Specific prefix
            to use for IPv4/IPv6 translation).</t>
          </list></t>

        <t>As YANG modules for the configuration for these functions are
        already defined in other documents, they are not repeated here.
        <xref target="RFC8022"></xref> describes the YANG model for routing
        management and can be used for configuring IPv4 routing. The YANG
        module for NAT configuration is described in <xref
        target="I-D.ietf-opsawg-nat-yang"></xref>.
        <xref target='lw4o6-ce-example'></xref> provides XML examples of how
        these models can be used together.</t>

        <t>The CE must already have minimal IPv6 configuration in place so it
        is reachable by the Netconf client to obtain softwire configuration.
        If additional IPv6 specific configuration is necessary, the YANG
        models defined in <xref target="RFC7277"></xref> and <xref
        target="RFC8022"></xref> may be used.</t>
      </section>
    </section>

    <section anchor="ce-tree-diagram" title="Softwire YANG CE Tree Diagram">
      <t><xref target="tree-diagram-ce"></xref> describes the softwire YANG
      module for CE elements. This module augments "ietf-interfaces", defined
      in <xref target="RFC7223"></xref> with an entry for the softwire. This
      entry can be referenced to configure IPv4 routing for the element.</t>

      <t>The module provides configuration and monitoring for all of the
      softwire mechanisms listed in <xref target="introduction"></xref>.</t>

      <figure align="center" anchor="tree-diagram-ce"
              title="Softwire YANG CE Tree Diagram">
        <artwork><![CDATA[
  module: ietf-softwire-ce
    augment /if:interfaces/if:interface:
      +--rw softwire-payload-mtu?   uint16
      +--rw softwire-path-mru?      uint16
      +--rw ce-interface
         +--rw (ce-type)?
            +--:(binding) {binding}?
            |  +--rw binding-ipv6info?   union
            |  +--rw br-ipv6-addr?       inet:ipv6-address
            +--:(algorithm) {algorithm}?
               +--rw algo-instances
                  +--rw algo-instance* [id]
                     +--rw enable?             boolean
                     +--rw algo-versioning
                     |  +--rw algo-version?   uint64
                     |  +--rw algo-date?      yang:date-and-time
                     +--rw id                  uint32
                     +--rw name?               string
                     +--rw (data-plane)?
                     |  +--:(encapsulation)
                     |  |  +--rw br-ipv6-addr        inet:ipv6-address
                     |  +--:(translation)
                     |     +--rw dmr-ipv6-prefix?    inet:ipv6-prefix
                     +--rw ea-len              uint8
                     +--rw rule-ipv6-prefix    inet:ipv6-prefix
                     +--rw rule-ipv4-prefix    inet:ipv4-prefix
                     +--rw forwarding          boolean
    augment /if:interfaces-state/if:interface:
      +--ro ce-interface
         +--ro name?                            string
         +--ro type?                            identityref
         +--ro sentIPv4Packet?                  yang:zero-based-counter64
         +--ro sentIPv4Byte?                    yang:zero-based-counter64
         +--ro sentIPv6Packet?                  yang:zero-based-counter64
         +--ro sentIPv6Byte?                    yang:zero-based-counter64
         +--ro rcvdIPv4Packet?                  yang:zero-based-counter64
         +--ro rcvdIPv4Byte?                    yang:zero-based-counter64
         +--ro rcvdIPv6Packet?                  yang:zero-based-counter64
         +--ro rcvdIPv6Byte?                    yang:zero-based-counter64
         +--ro droppedIPv4Packet?               yang:zero-based-counter64
         +--ro droppedIPv4Byte?                 yang:zero-based-counter64
         +--ro droppedIPv6Packet?               yang:zero-based-counter64
         +--ro droppedIPv6Byte?                 yang:zero-based-counter64
         +--ro droppedIPv4Fragments?            yang:zero-based-counter64
         +--ro droppedIPv4Bytes?                yang:zero-based-counter64
         +--ro IPv6FragmentsReassembled?        yang:zero-based-counter64
         +--ro IPv6FragmentsBytesReassembled?   yang:zero-based-counter64
         +--ro out-icmpv4-error-packets?        yang:zero-based-counter64
         +--ro out-icmpv6-error-packets?        yang:zero-based-counter64

    notifications:
      +---n softwire-ce-event {binding}?
         +--ro ce-binding-ipv6-addr-change    inet:ipv6-address

        ]]></artwork>
      </figure>

      <section anchor="tree-diagram-ce-desc"
               title="Softwire CE Tree Diagram Descriptions">
        <t>Additional information on some of the important CE elements is
        provided below:</t>

        <t><list style="symbols">
            <t>enabled: Allows the softwire CE function to be
            enabled/disabled.</t>

            <t>softwire-payload-mtu: used to set the IPv4 MTU for the
            softwire.</t>

            <t>softwire-path-mru: used to set the maximum IPv6 softwire packet
            size that can be received, including the encapsulation/
            translation overhead.</t>

            <t>ce-type: provides a choice statement allowing the binding or
            algorithmic softwire mechanisms to be selected.</t>
          </list></t>

        <t>Additional details relevant to binding softwire elements are:</t>

        <t><list style="symbols">
            <t>b4-ipv6-addr-format: indicates the format of lwB4 IPv6 address.
            If set to true, the IPv6 source address of the lwB4 is constructed
            according to the description in Section 6 of <xref
            target="RFC7597"></xref>; if set to false, the lwB4 can use any
            valid /128 address from an assigned IPv6 prefix.</t>

            <t>binding-ipv6info: used to set the IPv6 address type which is
            combined in a binding entry, for a complete address or a
            prefix.</t>

            <t>psid-offset: used to set the number of offset bits.</t>

            <t>psid-len: defines the number of ports that will be allocated
            for the softwire.</t>

            <t>psid: used to identify the set of ports allocated for a
            specific softwire.</t>
          </list></t>

        <t>Additional details relevant to some of the important algorithmic
        elements are provided below:</t>

        <t><list style="symbols">
            <t>algo-versioning: optionally used to add a incremental version
            number and/or timestamp to the algorithm. This can be used for
            logging/data retention purposes. The version number is incremented
            and a new timestamp value written whenever a change is made to the
            algorithm or a new instance is created.</t>

            <t>forwarding: specifies whether the rule can be used as a Forward
            Mapping Rule (FMR). If not set, this rule is a Basic Mapping Rule
            (BMR) only and must not be used for forwarding. See Section 4.1 of
            <xref target="RFC7598"></xref>.</t>

            <t>ea-len: used to set the length of the Embedded-Address (EA),
            which defined in the mapping rule for a MAP domain.</t>

            <t>data-plane: provides a choice statement for either
            encapsulation (MAP-E) or translation (MAP-T).</t>

            <t>br-ipv6-addr: defines the IPv6 address of the BR for MAP-E.</t>

            <t>dmr-ipv6-prefix: defines the Default Mapping Rule (DMR) for
            MAP-T.</t>

            <t>stat-count (ro): use to show the numbers of packets and bytes
            information of specific element respectively.</t>
          </list></t>

        <t>Additional information on some of the important notification nodes
        is listed below:</t>

        <t><list style="symbols">
            <t>invalid-entry, added-entry, modified-entry: used to notify the
            client that a specific binding entry or MAP rule is expired or
            invalidated, added, or modified.</t>

            <t>ce-binding-ipv6-addr-change: used to notify that the lwB4's
            binding-ipv6-address has been changed or the value of the
            'b4-ipv6-addr-format' is "False".</t>
          </list></t>
      </section>
    </section>

    <section anchor="br-tree-diagram" title="Softwire BR YANG Tree Diagram">
      <section anchor="br-tree-diagram-com" title="BR Tree Diagrams">
        <t><xref target="br-structure"></xref> describes the high level
        softwire YANG module for BRs. The module provides configuration and
        monitoring for all of the softwire mechanisms listed in <xref
        target="introduction"></xref>.</t>

        <figure align="center" anchor="br-structure"
                title="Softwire YANG BR Tree">
          <artwork><![CDATA[
module: ietf-softwire-br
    +--rw br-instances
       +--rw (br-type)?
          +--:(binding) {binding}?
          |  +--rw binding {binding}?
          |     +--rw br-instance* [id]
          |        +--rw binding-table-version
          |        |  +--rw binding-table-version?   uint64
          |        |  +--rw binding-table-date?      yang:date-and-time
          |        +--rw id                        uint32
          |        +--rw name?                     string
          |        +--rw softwire-num-threshold    uint32
          |        +--rw softwires-payload-mtu     uint16
          |        +--rw softwire-path-mru         uint16
          |        +--rw enable-hairpinning?       boolean
          |        +--rw binding-table
          |        |  +--rw binding-entry* [binding-ipv6info]
          |        |     +--rw binding-ipv6info     union
          |        |     +--rw binding-ipv4-addr?   inet:ipv4-address
          |        |     +--rw port-set
          |        |     |  +--rw psid-offset?   uint8
          |        |     |  +--rw psid-len       uint8
          |        |     |  +--rw psid           uint16
          |        |     +--rw br-ipv6-addr?        inet:ipv6-address
          |        +--rw icmp-policy
          |        |  +--rw icmpv4-errors
          |        |  |  +--rw allow-incoming-icmpv4?    boolean
          |        |  |  +--rw generate-icmpv4-errors?   boolean
          |        |  +--rw icmpv6-errors
          |        |     +--rw generate-icmpv6-errors?   boolean
          |        |     +--rw icmpv6-errors-rate?       uint16
          |        +--rw traffic-stat
          |        |  +--ro sentIPv4Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro sentIPv4Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro sentIPv6Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro sentIPv6Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro rcvdIPv4Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro rcvdIPv4Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro rcvdIPv6Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro rcvdIPv6Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv4Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv4Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv6Packet?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv6Byte?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv4Fragments?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro droppedIPv4Bytes?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro IPv6FragmentsReassembled?
          |        |  |       yang:zero-based-counter64
          |        |  +--ro IPv6FragmentsBytesReassembled?
          |        |  |       yang:zero-based-counter64
          |        |  +--rw out-icmpv4-error-packets?
          |        |  |       yang:zero-based-counter64
          |        |  +--rw out-icmpv6-error-packets?
          |        |          yang:zero-based-counter64
          |        +--rw hairpin-ipv4-bytes?       yang:zero-based-counter64
          |        +--rw hairpin-ipv4-packets?     yang:zero-based-counter64
          |        +--ro active-softwire-num?      uint32
          +--:(algorithm) {algorithm}?
             +--rw algorithm {algorithm}?
                +--rw algo-instance* [id]
                   +--rw id                uint32
                   +--rw name?             string
                   +--rw algo-instances
                   |  +--rw algo-instance* [id]
                   |     +--rw enable?             boolean
                   |     +--rw algo-versioning
                   |     |  +--rw algo-version?   uint64
                   |     |  +--rw algo-date?      yang:date-and-time
                   |     +--rw id                  uint32
                   |     +--rw name?               string
                   |     +--rw (data-plane)?
                   |     |  +--:(encapsulation)
                   |     |  |  +--rw br-ipv6-addr        inet:ipv6-address
                   |     |  +--:(translation)
                   |     |     +--rw dmr-ipv6-prefix?    inet:ipv6-prefix
                   |     +--rw ea-len              uint8
                   |     +--rw rule-ipv6-prefix    inet:ipv6-prefix
                   |     +--rw rule-ipv4-prefix    inet:ipv4-prefix
                   |     +--rw forwarding          boolean
                   +--rw traffic-stat
                      +--ro sentIPv4Packet?
                      |       yang:zero-based-counter64
                      +--ro sentIPv4Byte?
                      |       yang:zero-based-counter64
                      +--ro sentIPv6Packet?
                      |       yang:zero-based-counter64
                      +--ro sentIPv6Byte?
                      |       yang:zero-based-counter64
                      +--ro rcvdIPv4Packet?
                      |       yang:zero-based-counter64
                      +--ro rcvdIPv4Byte?
                      |       yang:zero-based-counter64
                      +--ro rcvdIPv6Packet?
                      |       yang:zero-based-counter64
                      +--ro rcvdIPv6Byte?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv4Packet?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv4Byte?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv6Packet?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv6Byte?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv4Fragments?
                      |       yang:zero-based-counter64
                      +--ro droppedIPv4Bytes?
                      |       yang:zero-based-counter64
                      +--ro IPv6FragmentsReassembled?
                      |       yang:zero-based-counter64
                      +--ro IPv6FragmentsBytesReassembled?
                      |       yang:zero-based-counter64
                      +--rw out-icmpv4-error-packets?
                      |       yang:zero-based-counter64
                      +--rw out-icmpv6-error-packets?
                              yang:zero-based-counter64

  notifications:
    +---n softwire-br-event {binding}?
    |  +--ro br-id?            -> /br-instances/binding/br-instance/id
    |  +--ro invalid-entry*    leafref
    |  +--ro added-entry*      inet:ipv6-address
    |  +--ro modified-entry*   leafref
    +---n softwire-algorithm-instance-event {algorithm}?
       +--ro algo-id             -> /br-instances/algorithm/algo-instance/id
       +--ro invalid-entry-id*   -> /br-instances/algorithm/algo-instance/id
       +--ro added-entry*        -> /br-instances/algorithm/algo-instance/id
       +--ro modified-entry*     -> /br-instances/algorithm/algo-instance/id
          ]]></artwork>
        </figure>
      </section>

      <section anchor="tree-diagram-br-desc"
               title="Softwire BR Tree Diagram Descriptions">
        <t>Additional information on some of the important BR elements are
        provided below:</t>

        <t><list style="symbols">
            <t>binding-table-versioning: optionally used to add an incremental
            version number and/or timestamp to the binding table. This can be
            used for logging/data retention purposes. The version number is
            incremented and a new timestamp value written whenever a change is
            made to the contents of the binding table or a new binding table
            list is created.</t>

            <t>binding-entry: used to define the binding relationship between
            3-tuples, which contains the lwB4's IPv6 address/prefix, the
            allocated IPv4 address and restricted port-set. For detail
            information, please refer to <xref target="RFC7596"></xref>.</t>

            <t>softwire-num-threshold: used to set the maximum number of
            softwires that can be created on the lw4o6 element
            simultaneously.</t>

            <t>active-softwire-num (ro): used to present the number of
            softwires currently provisioned on the element.</t>

            <t>active (ro): used to show the status of particular
            binding-entry.</t>
          </list></t>

        <t>Additional information on some of the important notification nodes
        is listed below:</t>

        <t><list style="symbols">
            <t>invalid-entry, added-entry, modified-entry: used to notify the
            client that a specific binding entry or MAP rule is expired or
            invalidated, added, or modified.</t>
          </list></t>
      </section>
    </section>

    <section anchor="ce-yang-model" title="Softwire CE YANG Model">
      <t>This module imports typedefs from <xref target="RFC6991"></xref>.</t>

      <figure>
        <artwork><![CDATA[
  <CODE BEGINS>   file "ietf-softwire-ce@2017-10-12.yang"
    module ietf-softwire-ce {
       yang-version 1.1;
       namespace "urn:ietf:params:xml:ns:yang:ietf-softwire-ce";
       prefix "softwire-ce";

       import ietf-inet-types {prefix inet; }
       import ietf-interfaces {prefix if; }
       import iana-if-type {prefix ianaift; }
       import ietf-softwire-common {prefix softwire-common; }
       import ietf-yang-types { prefix yang; }

       organization "Softwire Working Group";

       contact
         "
         Qi Sun <sunqi.ietf@gmail.com>
         Hao Wang <wangh13@mails.tsinghua.edu.cn>
         Yong Cui <yong@csnet1.cs.tsinghua.edu.cn>
         Ian <Farrer ian.farrer@telekom.de>
         Sladjana Zoric <sladjana.zoric@telekom.de>
         Mohamed Boucadair <mohamed.boucadair@orange.com>
         Rajiv <Asati rajiva@cisco.com>
         ";

       description
         "This document defines a YANG data module for the configuration and
         management of A+P Softwire Customer Premises Equipment (CEs). It
         covers Lightweight 4over6, MAP-E, and MAP-T mechanisms.

         Copyright (c) 2017 IETF Trust and the persons identified
         as authors of the code. All rights reserved.
         This version of this YANG module is part of RFC XXX; see the RFC
         itself for full legal notices.";

       revision 2017-10-12 {
         description
           "Initial version of standalone CE model, with updates for
           importing groups from ietf-softwire-common and
           augmenting ietf-interfaces.";
            reference "-02";
       }

     /*
      * Features
      */

      feature binding {
        description
        "Lightweight 4over6 (binding) is an IPv4-over-IPv6 tunnelling
         transition mechanism. Lightweight 4over6 is a solution designed
         specifically for complete independence between IPv6 subnet
         prefix (and /128 IPv6 address) and IPv4 address with or
         without IPv4 address sharing.

         This is accomplished by maintaining state for
         each softwire (per-subscriber state) in the central lwAFTR and
         a hub-and-spoke forwarding architecture. In order to delegate
         the NAPT function and achieve IPv4 address sharing,
         port-restricted IPv4 addresses needs to be allocated to CEs.

         Besides lw4o6, this feature also covers MAP in 1:1 mode
         (using offset=0, PSID explicitly defined)";

       reference
          "RFC7596";
      }

      feature algorithm {
        description
          "MAP-E is an IPv6 transition mechanism for transporting IPv4
          packets across an IPv6 network using IP encapsulation. MAP-E
          allows for a reduction of the amount of centralized state using
          rules to express IPv4/IPv6 address mappings. This introduces an
          algorithmic relationship between the IPv6 subnet
          and IPv4 address.
          The Mapping of Address and Port - Translation (MAP-T)
          architecture is a double stateless NAT64 based solution. It uses
          the stateless algorithmic address & transport layer port mapping
          scheme defined in MAP-E. The MAP-T solution differs from MAP-E in
          the use of IPv4-IPv6 translation, rather than encapsulation, as
          the form of IPv6 domain transport.
          This feature indicates the instance functions as a MAP-E or
          MAP-T instance.";

        reference
          "RFC7597 & RFC7599";
      }

      // Binding Entry
    grouping binding-entry {
      description
        "The lwAFTR maintains an address binding table that contains
        the binding between the lwB4's IPv6 address, the allocated IPv4
        address and restricted port-set.";

      leaf binding-ipv6info {

        type union {
          type inet:ipv6-address;
          type inet:ipv6-prefix;
        }

        description
          "The IPv6 information for a binding entry.
           If this is type IPv6 prefix, it indicates that
           the IPv6 source address of the CE is constructed
           according to the description in RFC7596;
           if it is type IPv6 address, it means the CE uses
           any valid /128 address from a prefix assigned to
           the CE.
           ";
      }

       leaf br-ipv6-addr {
        type inet:ipv6-address;
        description
          "The IPv6 address for lwaftr.";
      }
    }

       // configuration parameters for CE softwire interface
       augment "/if:interfaces/if:interface" {
         when "if:type = 'ianaift:tunnel'";
         description "CE Softwire interface configuration";

         leaf softwire-payload-mtu {
           type uint16;
           description
             "The payload MTU for the Softwire tunnel.";
         }

         leaf softwire-path-mru {
           type uint16;
           description
             "The path MRU for the softwire (payload + encapsulation overhead).";
         }

         container ce-interface {
           description "instances for CE";

           choice ce-type {
             description "Sets the CE softwire mechanism";

             case binding {
               if-feature binding;
               description "CE binding configuration";
               uses binding-entry;
             }

             case algorithm {
               if-feature algorithm;
               description "CE algorithm configuration";
               uses softwire-common:algorithm;
             }
           }
         }
       }

       // operational state parameters for CE softwire binding interface
       augment "/if:interfaces-state/if:interface" {
         when "if:type = 'ianaift:tunnel'";
         description "CE Softwire binding interface operational state";

         container ce-interface {
           config false;
           description
             "Data nodes for the operational state of interfaces.";

             leaf name {
               type string;
               description
                 "The name of the interface.";
               reference
                 "RFC 2863: The Interfaces Group MIB - ifName";
             }

             leaf type {
               type identityref {
                 base if:interface-type;
               }
               description
                 "The type of the interface.";
               reference
                 "RFC 2863: The Interfaces Group MIB - ifType";
            }
            uses softwire-common:traffic-stat;
         }
       }


    /*
    * Notifications
    */

     notification softwire-ce-event {
       if-feature binding;
       description "CE notification";
       leaf ce-binding-ipv6-addr-change {
         type inet:ipv6-address;
         mandatory true;
         description
           "The source softwire tunnel IPv6 address of the CE.
            If 'b4-ipv6-addr-format' is false, or the lwb4's
            binding-ipv6-address changes for any reason,
            it SHOULD notify the NETCONF client.";
       }
     }
    }
<CODE ENDS>
        ]]></artwork>
      </figure>
    </section>

    <section anchor="br-yang-model" title="BR Softwire YANG Model">
      <t>This module imports typedefs from <xref target="RFC6991"></xref>.</t>

      <figure>
        <artwork><![CDATA[<CODE BEGINS> file "ietf-softwire-br@2017-10-12.yang"
          module ietf-softwire-br {
            yang-version 1.1;
            namespace "urn:ietf:params:xml:ns:yang:ietf-softwire-br";
            prefix "softwire-br";

            import ietf-inet-types {prefix inet; }
            import ietf-yang-types {prefix yang; }
            import ietf-softwire-common {prefix softwire-common; }

            organization "Softwire Working Group";

            contact
              "
              Qi Sun <sunqi.ietf@gmail.com>
              Hao Wang <wangh13@mails.tsinghua.edu.cn>
              Yong Cui <yong@csnet1.cs.tsinghua.edu.cn>
              Ian <Farrer ian.farrer@telekom.de>
              Sladjana Zoric <sladjana.zoric@telekom.de>
              Mohamed Boucadair <mohamed.boucadair@orange.com>
              Rajiv <Asati rajiva@cisco.com>
              ";

            description
              "This document defines a YANG data module for the configuration and
              management of A+P Softwire Border Routers. It covers Lightweight 4over6,
              MAP-E, and MAP-T mechanisms.

              Copyright (c) 2017 IETF Trust and the persons identified
              as authors of the code. All rights reserved.
              This version of this YANG module is part of RFC XXX; see the RFC
              itself for full legal notices.";

            revision 2017-10-12 {
              description
                "Update...";
                 reference "--02";
            }

            revision 2017-06-14 {
              description
                "Monolithic version of ietf-softwire divided into separate CE and BR
                models. Added icmp handling and improved counters.";
                 reference "-06";
            }
            revision 2016-06-04 {
              description
                "Version-05: Combined MAP-E/MAP-T into a single tree. Added binding
                    table/algorthm versioning";
                 reference "-05";
            }

            revision 2015-09-30 {
              description
                "Version-04: Fix YANG syntax; Add flags to map-rule; Remove
                the map-rule-type element. ";
                 reference "-04";
            }

            revision 2015-04-07 {
              description
                "Version-03: Integrate lw4over6; Updata state nodes; Correct
                grammar errors; Reuse groupings; Update descriptions.
                Simplify the model.";
                 reference "-03";
            }

            revision 2015-02-10 {
              description
                "Version-02: Add notifications.";
                 reference "-02";
            }


            revision 2015-02-06 {
              description
                "Version-01: Correct grammar errors; Reuse groupings; Update
                descriptions.";
                 reference "-01";
            }

            revision 2015-02-02 {
              description
                "Initial revision.";
                 reference "-00";
            }

          /*
           * Features
           */

            feature binding {
              description
              "Lightweight 4over6 (binding) is an IPv4-over-IPv6 tunnelling
               transition mechanism. Lightweight 4over6 is a solution designed
               specifically for complete independence between IPv6 subnet
               prefix (and /128 IPv6 address) and IPv4 address with or
               without IPv4 address sharing.

               This is accomplished by maintaining state for
               each softwire (per-subscriber state) in the central lwAFTR and
               a hub-and-spoke forwarding architecture. In order to delegate
               the NAPT function and achieve IPv4 address sharing,
               port-restricted IPv4 addresses needs to be allocated to CEs.

               Besides lw4o6, this feature also covers MAP in 1:1 mode
               (using offset=0, PSID explicitly defined)";

             reference
                "RFC7596";
            }

            feature algorithm {
              description
                "MAP-E is an IPv6 transition mechanism for transporting IPv4
                packets across an IPv6 network using IP encapsulation. MAP-E
                allows for a reduction of the amount of centralized state using
                rules to express IPv4/IPv6 address mappings. This introduces an
                algorithmic relationship between the IPv6 subnet
                and IPv4 address.
                The Mapping of Address and Port - Translation (MAP-T)
                architecture is a double stateless NAT64 based solution. It uses
                the stateless algorithmic address & transport layer port mapping
                scheme defined in MAP-E. The MAP-T solution differs from MAP-E in
                the use of IPv4-IPv6 translation, rather than encapsulation, as
                the form of IPv6 domain transport.
                This feature indicates the instance functions as a MAP-E or
                MAP-T instance.";

              reference
                "RFC7597 & RFC7599";
            }

            container br-instances {
              description
                "BR Instances";

                choice br-type {
                  description
                    "Select binding or algorithmic BR functionality.";
                  case binding {
                    if-feature binding;
                      container binding {
                      if-feature binding;
                      description
                        "lw4over6 (binding table) configuration.";
                        list br-instance {
                          key "id";
                          description
                          "A set of lwAFTRs to be configured.";
                          container binding-table-version {
                            description "binding table's version";
                            leaf binding-table-version{
                              type uint64;
                              description "Incremental version number
                              of the binding table";
                            }
                            leaf binding-table-date {
                              type yang:date-and-time;
                              description "Timestamp of the binding
                              table";
                            }
                          }
                          leaf id {
                            type uint32;
                            mandatory true;
                            description "An instance identifier.";
                          }
                          leaf name {
                            type string;
                            description "The name for the lwaftr.";
                          }
                          leaf softwire-num-threshold {
                            type uint32;
                            mandatory true;
                            description
                              "The maximum number of softwires that can be created on
                              the lwAFTR.";
                          }
                          leaf softwires-payload-mtu {
                            type uint16;
                            mandatory true;
                            description
                              "The payload MTU for Lightweight 4over6 softwire.";
                          }
                          leaf softwire-path-mru {
                            type uint16;
                            mandatory true;
                            description
                              "The path MRU for Lightweight 4over6 softwire.";
                          }
                          leaf enable-hairpinning {
                            type boolean;
                            default true;
                            description
                             "Enables/disables support for locally forwarding
                             (hairpinning) traffic between two CEs (RFC7596
                               Section 6.2)";
                          }
                          container binding-table {
                            description "binding table";
                            list binding-entry {
                              key "binding-ipv6info";
                              description "binding entry";
                              uses softwire-common:binding-entry;
                            }
                          }
                          container icmp-policy {
                            description
                             "The lwAFTR can be configured to process or drop incoming ICMP
                              messages, and to generate outgoing ICMP error messages or
                              not.";

                            container icmpv4-errors {
                              description
                               "ICMPv4 error processing configuration";
                              leaf allow-incoming-icmpv4 {
                                type boolean;
                                default true;
                                description
                                 "Whether to allow processing of incomming ICMPv4 packets.
                                 (RFC7596 )";
                              }

                              leaf generate-icmpv4-errors {
                                type boolean;
                                default true;
                                description
                                 "Whether to generate outgoing ICMP error messages on
                                 receipt of an inbound IPv4 packet with no matching
                                 binding table entry (RFC7596 Seciton 5.2).";
                              }
                            }

                            container icmpv6-errors {
                              description
                               "ICMPv6 error processing configuration";
                              leaf generate-icmpv6-errors {
                                type boolean;
                                default true;
                                description
                                 "Whether to generate ICMPv6 errors messages if no
                                 matching binding table entry is found (RFC7596
                                 Section 6.2)";
                              }
                              leaf icmpv6-errors-rate {
                                type uint16;
                                description
                                 "Rate limit threshold in messages per-second
                                 for sending ICMPv6 errors messages (RFC7596
                                   Section 9.)";
                              }
                            }
                          }

                        container traffic-stat {
                               description
                                  "traffic-stat";
                              uses softwire-common:traffic-stat;
                         }

                        leaf hairpin-ipv4-bytes {
                          type yang:zero-based-counter64;
                          description "IPv4 packets locally routed to another attached
                          b4 (hairpinned).";
                        }

                        leaf hairpin-ipv4-packets {
                          type yang:zero-based-counter64;
                          description "IPv4 bytes locally routed to another attached
                          b4 (hairpinned).";
                        }

                        leaf active-softwire-num {
                          type uint32;
                          config false;
                          description
                            "The number of currently active softwires on the
                            lw4over6 (binding) instance.";
                        }
                      }
                    }
                  }
                  case algorithm {
                    if-feature algorithm;
                    container algorithm {
                      if-feature algorithm;
                      description
                        "Indicate the instances support the MAP-E and MAP-T function.
                        The instances advertise the map-e/map-t feature through the
                        capability exchange mechanism when a NETCONF session is
                        established.";
                        list algo-instance {
                          key "id";
                          description "Instances for algorithm";
                          leaf id {
                            type uint32;
                            mandatory true;
                            description "id";
                          }
                          leaf name {
                            type string;
                            description "The map-e instance name.";
                          }
                          uses softwire-common:algorithm;
                           container traffic-stat {
                              description
                                "traffic-stat";
                              uses softwire-common:traffic-stat;
                         }
                        }
                      }
                    }
                  }
                }

          /*
           * Notifications
           */
            notification softwire-br-event {
              if-feature binding;
              description "Notifications for BR.";
              leaf br-id {
                type leafref {
                  path
                    "/br-instances/binding/"
                    + "br-instance/id";
                }
                    description "...";
              }
              leaf-list invalid-entry {
                type leafref {
                  path
                    "/br-instances/binding/"
                    + "br-instance[id=current()/../br-id]/"
                    + "binding-table/binding-entry/binding-ipv6info";
                }
                description
                  "Notify the client that a specific binding entry has been
                  expired/invalid. The binding-ipv6info identifies an entry.";
              }
              leaf-list added-entry {
                  type inet:ipv6-address;
                  description
                    "Notify the client that a binding entry has been added.
                    The ipv6 address of that entry is the index. The client
                    get other information from the lwaftr about the entry
                    indexed by that ipv6 address.
                    ";
              }
              leaf-list modified-entry {
                  type leafref {
                    path
                      "/br-instances/binding/"
                      + "br-instance[id=current()/../br-id]/"
                      + "binding-table/binding-entry/binding-ipv6info";
                  }
                    description "...";
              }
            }

            notification softwire-algorithm-instance-event {
              if-feature algorithm;
              description "Notifications for MAP-E or MAP-T.";
              leaf algo-id {
                type leafref {
                  path
                    "/br-instances/algorithm/algo-instance/id";
                }
                mandatory true;
                description "MAP-E or MAP-T event.";
              }
              leaf-list invalid-entry-id {
                type leafref {
                  path
                    "/br-instances/algorithm/algo-instance/id";
                }
                description "Invalid entry event.";
              }
              leaf-list added-entry {
                type leafref {
                  path
                    "/br-instances/algorithm/algo-instance/id";
                }
                description "Added entry.";
              }
              leaf-list modified-entry {
                type leafref {
                  path
                    "/br-instances/algorithm/algo-instance/id";
                }
                description "Modified entry.";
              }
            }
          }
<CODE ENDS>
        ]]></artwork>
      </figure>
    </section>

    <section anchor="commons-softwire-elements"
             title="Common Softwire Element Groups YANG">
      <t>The following YANG model contains definitions that are used by both
      the softwire CE and softwire BG YANG models.</t>

      <figure>
        <artwork><![CDATA[
<CODE BEGINS> file "ietf-softwire-common@2017-10-12.yang"
  module ietf-softwire-common {
    yang-version 1.1;
    namespace "urn:ietf:params:xml:ns:yang:ietf-softwire-common";
    prefix "softwire-common";

    import ietf-inet-types { prefix inet; }
    import ietf-yang-types { prefix yang; }

    organization "Softwire Working Group";

    contact
      "
      Qi Sun <sunqi.ietf@gmail.com>
      Hao Wang <wangh13@mails.tsinghua.edu.cn>
      Yong Cui <yong@csnet1.cs.tsinghua.edu.cn>
      Ian <Farrer ian.farrer@telekom.de>
      Sladjana Zoric <sladjana.zoric@telekom.de>
      Mohamed Boucadair <mohamed.boucadair@orange.com>
      Rajiv <Asati rajiva@cisco.com>
      ";

    description
      "This document defines a YANG data model for the configuration and
      management of A+P Softwire Customer Premises Equipment (CEs). It
      covers Lightweight 4over6, MAP-E and MAP-T mechanisms.

      Copyright (c) 2017 IETF Trust and the persons identified
      as authors of the code. All rights reserved.
      This version of this YANG module is part of RFC XXX; see the RFC
      itself for full legal notices.";

    revision 2017-10-12 {
      description
        "Initial version of containing a model for common softwire elements.";
         reference "-02";
    }

    /*
    * Grouping
    */

    grouping port-set {
        description
          "Indicates a set of ports.
           It may be a simple port range, or use the PSID algorithm
           to represent a range of transport layer
           ports which will be used by a NAPT.";

           leaf psid-offset {
              type uint8 {
              range 0..16;
           }
             description
            "The number of offset bits. In Lightweight 4over6,
            the default value is 0 for assigning one contiguous
            port range. In MAP-E/T, the default value is 6,
            which excludes system ports by default and assigns
            port ranges distributed across the entire port
            space.";
           }

          leaf psid-len {
             type uint8 {
               range 0..15;
             }
            mandatory true;
           description
             "The length of PSID, representing the sharing
             ratio for an IPv4 address.";
           }

          leaf psid {
           type uint16;
           mandatory true;
           description
             "Port Set Identifier (PSID) value, which
              identifies a set of ports algorithmically.";
          }
       }

    grouping binding-entry {
      description
        "The lwAFTR maintains an address binding table that contains
        the binding between the lwB4's IPv6 address, the allocated IPv4
        address and restricted port-set.";
      leaf binding-ipv6info {
        type union {
          type inet:ipv6-address;
          type inet:ipv6-prefix;
        }
        description
          "The IPv6 information for a binding entry.
           If this is an IPv6 prefix, it indicates that
           the IPv6 source address of the CE is constructed
           according to the description in RFC7596;
           if it is an IPv6 address, it means the CE uses
           any /128 address from the assigned CE prefix.
           ";
      }
      leaf binding-ipv4-addr {
        type inet:ipv4-address;
        description
          "The IPv4 address assigned to the lwB4, which is
           used as the IPv4 external address
           for lwB4 local NAPT44.";
      }
      container port-set {
        description
          "For Lightweight 4over6, the default value
          of offset should be 0, to configure one contiguous
          port range.";
        uses port-set {
          refine "port-type/port-set-algo/psid-offset" {
            default "0";
          }
        }
      }
      leaf br-ipv6-addr {
        type inet:ipv6-address;
        description
          "The IPv6 address for lwaftr.";
      }
    }

    grouping algorithm {
      description
        "Indicate the instances support the MAP-E and MAP-T function.
        The instances advertise the map-e feature through the
        capability exchange mechanism when a NETCONF session is
        established.";
      container algo-instances {
        description
          "A set of MAP-E or MAP-T instances to be configured,
           applying to BRs and CEs. A MAP-E/T instance defines a MAP
           domain comprising one or more MAP-CE and MAP-BR";
        list algo-instance {
          key "id";
          description "MAP forwarding rule instance for MAP-E/MAP-T";
          leaf enable {
            type boolean;
            description
              "Enable/disable individual MAP-E or MAP-T rule.";
          }
          container algo-versioning {
            description "algorithm's version";
            leaf algo-version {
              type uint64;
              description "Incremental version number to
              the algorithm";
            }
            leaf algo-date {
              type yang:date-and-time;
              description "Timestamp to the algorithm";
            }
          }
          leaf id {
            type uint32;
            mandatory true;
            description "Algorithm Instance ID";
          }
          leaf name {
            type string;
            description "The name for the instance.";
          }
          choice data-plane {
            description "Selects MAP-E (encapsulation) or MAP-T (translation)";
            case encapsulation {
              description "encapsulation for MAP-E";
              leaf br-ipv6-addr {
                type inet:ipv6-address;
                mandatory true;
                description
                  "The IPv6 address of the MAP-E BR.";
              }
            }
            case translation {
              description "translation for MAP-T";
              leaf dmr-ipv6-prefix {
                type inet:ipv6-prefix;
                description
                  "The IPv6 prefix of the MAP-T BR. ";
              }
            }
          }
          leaf ea-len {
            type uint8;
            mandatory true;
            description
              "Embedded Address (EA) bits are the IPv4 EA-bits in the IPv6
              address identify an IPv4 prefix/address (or part thereof) or
              a shared IPv4 address (or part thereof) and a port-set identifier.
              The length of the EA-bits is defined as part of a MAP rule for a
              MAP domain.";
          }
          leaf rule-ipv6-prefix {
            type inet:ipv6-prefix;
            mandatory true;
            description
              "The Rule IPv6 prefix defined in the mapping rule.";
          }
          leaf rule-ipv4-prefix {
            type inet:ipv4-prefix;
            mandatory true;
            description
              "The Rule IPv4 prefix defined in the mapping rule.";
          }
          leaf forwarding {
            type boolean;
            mandatory true;
            description
              "This parameter specifies whether the rule may be used for
              forwarding (FMR). If set, this rule is used as an FMR;
              if not set, this rule is a BMR only and must not be used
              for forwarding.";
          }
        }
      }
    }

    grouping traffic-stat {
      description "Traffic statistics";
      leaf sentIPv4Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of decapsulated/translated IPv4 packets sent.";
      }
      leaf sentIPv4Byte {
        type yang:zero-based-counter64;
        config false;
        description "Decapsulated/translated IPv4 traffic sent, in bytes";
      }
      leaf sentIPv6Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of encapsulated/translated IPv6 packets sent.";
      }
      leaf sentIPv6Byte {
        type yang:zero-based-counter64;
        config false;
        description "Encapsulated/translated IPv6 traffic sent, in bytes";
      }
      leaf rcvdIPv4Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of IPv4 packets received for processing.";
      }
      leaf rcvdIPv4Byte {
        type yang:zero-based-counter64;
        config false;
        description "IPv4 traffic received for processing, in bytes";
      }
      leaf rcvdIPv6Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of IPv6 packets received for processing.";
      }
      leaf rcvdIPv6Byte {
        type yang:zero-based-counter64;
        config false;
        description "IPv6 traffic received for processing, in bytes";
      }
      leaf droppedIPv4Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of IPv4 packets dropped.";
      }
      leaf droppedIPv4Byte {
        type yang:zero-based-counter64;
        config false;
        description "IPv4traffic dropped, in bytes";
      }
      leaf droppedIPv6Packet {
        type yang:zero-based-counter64;
        config false;
        description "Number of IPv4 packets dropped.";
      }
      leaf droppedIPv6Byte {
        type yang:zero-based-counter64;
        config false;
        description "IPv4 traffic dropped, in bytes";
      }
      leaf droppedIPv4Fragments {
         type yang:zero-based-counter64;
         config false;
         description "Number of fragmented IPv4 packets dropped";
      }
      leaf droppedIPv4Bytes {
         type yang:zero-based-counter64;
         config false;
         description "Fragmented IPv4 traffic dropped, in bytes";
      }
      leaf IPv6FragmentsReassembled {
        type yang:zero-based-counter64;
        config false;
        description "Number of IPv6 fragments successfully reassembled";
      }
      leaf IPv6FragmentsBytesReassembled {
        type yang:zero-based-counter64;
        config false;
        description "IPv6 fragments successfully reassembled, in bytes";
      }
      leaf out-icmpv4-error-packets {
        type yang:zero-based-counter64;
        description "Internally generated ICMPv4 error packets.";
      }
      leaf out-icmpv6-error-packets {
        type yang:zero-based-counter64;
        description "Internally generted ICMPv6 error packets.";
      }
    }
  }
<CODE ENDS>                 ]]></artwork>
      </figure>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The YANG module defined in this memo is designed to be accessed via
      the NETCONF protocol <xref target="RFC6241"></xref>. The lowest NETCONF
      layer is the secure transport layer and the mandatory to implement
      secure transport is SSH <xref target="RFC6242"></xref>. The NETCONF
      access control model <xref target="RFC6536"></xref> provides the means
      to restrict access for particular NETCONF users to a pre-configured
      subset of all available NETCONF protocol operations and content.</t>

      <t>All data nodes defined in the YANG module which can be created,
      modified and deleted (i.e., config true, which is the default). These
      data nodes are considered sensitive. Write operations (e.g.,
      edit-config) applied to these data nodes without proper protection can
      negatively affect network operations.</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>This document requests IANA to register the following URIs in the
      "IETF XML Registry" <xref target="RFC3688"></xref>.<figure>
          <artwork><![CDATA[
            URI: urn:ietf:params:xml:ns:yang:softwire-ce
            Registrant Contact: The IESG.
            XML: N/A; the requested URI is an XML namespace.
          ]]></artwork>
        </figure> <figure>
          <artwork><![CDATA[
            URI: urn:ietf:params:xml:ns:yang:softwire-br
            Registrant Contact: The IESG.
            XML: N/A; the requested URI is an XML namespace.
          ]]></artwork>
        </figure> <figure>
          <artwork><![CDATA[
            URI: urn:ietf:params:xml:ns:yang:softwire-common
            Registrant Contact: The IESG.
            XML: N/A; the requested URI is an XML namespace.
          ]]></artwork>
        </figure></t>

      <t>This document requests that IANA registers the following YANG modules
      in the "YANG Module Names" registry <xref target="RFC6020"></xref>.
      <figure>
          <artwork><![CDATA[
            name: ietf-softwire-ce
            namespace: urn:ietf:params:xml:ns:yang:softwire-ce
            prefix: softwire-ce
            reference: RFC XXXX
          ]]></artwork>
        </figure> <figure>
          <artwork><![CDATA[
            name: ietf-softwire-br
            namespace: urn:ietf:params:xml:ns:yang:softwire-br
            prefix: softwire-br
            reference: RFC XXXX
          ]]></artwork>
        </figure> <figure>
          <artwork><![CDATA[
            name: ietf-softwire-common
            namespace: urn:ietf:params:xml:ns:yang:softwire-common
            prefix: softwire-br
            reference: RFC XXXX
          ]]></artwork>
        </figure></t>
    </section>

    <section anchor="acknowledgements" title="Acknowledgements">
      <t>The authors would like to thank Lishan Li, Bert Wijnen, Giles Heron,
      Ole Troan, and Leo Tietz for their contributions to this work.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.6536'?>

      <?rfc include='reference.RFC.7223'?>

      <?rfc include='reference.RFC.7596'?>

      <?rfc include='reference.RFC.7597'?>

      <?rfc include='reference.RFC.7598'?>

      <?rfc include='reference.RFC.7599'?>

      <?rfc include='reference.RFC.7950'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.ietf-softwire-dslite-yang'?>

      <?rfc include='reference.I-D.ietf-opsawg-nat-yang'?>

      <?rfc include='reference.RFC.7277'?>

      <?rfc include='reference.RFC.8022'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.I-D.ietf-netmod-yang-tree-diagrams'?>
    </references>

    <section title="Configuration Examples">
      <t>The following sections of the document provide examples on how these
      YANG models could be used for configuring softwire elements.</t>

      <section anchor="lw4o6-example"
               title="Configuration Example for a lw4o6 BR Binding-Table">
        <t>The lwAFTR maintains an address binding table which contains the
        following 3-tuples:</t>

        <t><list style="symbols">
            <t>IPv6 Address for a single lwB4</t>

            <t>Public IPv4 Address</t>

            <t>Restricted port-set</t>
          </list></t>

        <t>The entry has two functions: the IPv6 encapsulation of inbound IPv4
        packets destined to the lwB4 and the validation of outbound
        IPv4-in-IPv6 packets received from the lwB4 for de-capsulation.</t>

        <t>Consider an example for the following lw4o6 binding table
        entry:</t>

        <t><list hangIndent="28" style="hanging">
            <t hangText="lwB4 Binding IPv6 Address:">2001:db8::1</t>

            <t hangText="lwB4 Binding IPv4 Address:">192.0.2.1</t>

            <t hangText="lwB4 IPv6 Address:">123</t>

            <t hangText="lwB4 PSID Length">8</t>

            <t hangText="BR IPv6 Address:">2001:db8:1::2</t>
          </list></t>

        <figure anchor="lw4o6-br-example-xml"
                title="lw4o6 Binding-Table Configuration XML">
          <artwork><![CDATA[

<config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <softwire-config xmlns="urn:ietf:params:xml:ns:yang:ietf-softwire-br">
    <br-instances>
      <binding>
          <br-instance>
            <id>1</id>
            <binding-table>
              <binding-entry>
                <binding-ipv6info>2001:db8::1</binding-ipv6info>
                <binding-ipv4-addr>192.0.2.1</binding-ipv4-addr>
                <port-set>
                  <psid>123</psid>
                  <psid-len>8</psid-len>
                </port-set>
                <br-ipv6-addr>2001:db8:1::2</br-ipv6-addr>
              </binding-entry>
            </binding-table>
            <softwire-num-threshold>1024</softwire-num-threshold>
            <softwire-path-mru>1540</softwire-path-mru>
            <softwire-payload-mtu>1500</softwire-payload-mtu>
          </br-instance>
      </binding>
    </br-instances>
  </softwire-config>
</config>

          ]]></artwork>
        </figure>
      </section>

      <section anchor="map-e-example"
               title="Configuration Example for a MAP-E BR">
        <t>A MAP-E BR is configured with forward mapping rules for the clients
        it is serving. In this example (taken from <xref
        target="RFC7597"></xref>, Appendix A, Example 2), the following
        parameters are required:</t>

        <t><list style="symbols">
            <t>Rule IPv6 Prefix</t>

            <t>Rule IPv4 Prefix</t>

            <t>Rule EA-bit bit length</t>

            <t>IPv6 Address of MAP-BR</t>
          </list></t>

        <t>The mapping rule has two functions: identifying the destination CE
        IPv6 address for encapsulating inbound IPv4 packets and the validation
        of outbound IPv4-in-IPv6 packets received from the CE for
        de-capsulation.</t>

        <t>The transport type for the data plane also needs to be configured
        for encapsulation to enable MAP-E and forwarding needs to be
        enabled.</t>

        <t>Consider an example for the following MAP-E Forwarding Mapping
        Rule:</t>

        <t><list hangIndent="20" style="hanging">
            <t hangText="Data plane:">encapsulation</t>

            <t hangText="Rule IPv6 Prefix:">2001:db8::/40</t>

            <t hangText="Rule IPv4 Prefix:">192.0.2.0/24</t>

            <t hangText="Rule EA-bit Length:">16</t>

            <t hangText="BR IPv6 Address:">2001:db8:ffff::1</t>
          </list></t>

        <t>Here is the example MAP-E BR configuration xml:</t>

        <figure anchor="map-e-example-xml" title="MAP-E FMR Configuration XML">
          <artwork><![CDATA[

      <config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
        <softwire-config xmlns="urn:ietf:params:xml:ns:yang:ietf-softwire-br">
          <br-instances>
            <algorithm>
                <algo-instance>
                  <id>42</id>
                  <algo-instances>
                    <algo-instance>
                      <id>1234</id>
                      <data-plane>encapsulation</data-plane>
                      <ea-len>16</ea-len>
                      <rule-ipv4-prefix>192.0.2.0/24</rule-ipv4-prefix>
                      <rule-ipv6-prefix>2001:db8::/40</rule-ipv6-prefix>
                      <forwarding>true</forwarding>
                      <br-ipv6-addr>2001:db8:ffff::1</br-ipv6-addr>
                      <psid-offset>6</psid-offset>
                      <psid-len>8</psid-len>
                    </algo-instance>
                  </algo-instances>
                </algo-instance>
            </algorithm>
          </br-instances>
        </softwire-config>
      </config>

          ]]></artwork>
        </figure>
      </section>

      <section anchor="lw4o6-ce-example" title="lw4o6 CE Configuration Example">
        <t>The following section provides XML examples for configuring a lw4o6
        CE. Examples for routing and NAT44 are also provided for
        convienience.</t>

        <t>Consider an example for the following lw4o6 CE Configuration:</t>

        <t><list hangIndent="28" style="hanging">
            <t hangText="lwB4 Binding IPv6 Address:">2001:db8::1</t>

            <t hangText="lwB4 Binding IPv4 Address:">192.0.2.1</t>

            <t hangText="lwB4 IPv6 Address:">123</t>

            <t hangText="lwB4 PSID Length">8</t>

            <t hangText="BR IPv6 Address:">2001:db8:1::2</t>
          </list></t>

        <figure anchor="lw4o6-ce-example-xml"
                title="lw4o6 CE Configuration XML">
          <artwork><![CDATA[

  <config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces">
    <interface>
      <name>lw4o6-wan</name>
      <type xmlns:iana="urn:ietf:params:xml:ns:yang:iana-if-type">iana:tunnel</type>
      <ce-interface xmlns="urn:ietf:params:xml:ns:yang:ietf-softwire-ce">
        <br-ipv6-addr>2001:db8:1::2</br-ipv6-addr>
        <binding-ipv6info>2001:db8::1</binding-ipv6info>
      </ce-interface>
    </interface>
  </interfaces>
</config>
    ]]></artwork>
        </figure>

        <t>In the above example, the interface name is defined for the
        softwire tunnel. This name is then referenced by the routing
        configuration for the IPv4 route. The following section provides
        example configuration for the CE's IPv4 routing, using the YANG model
        described in <xref target="RFC8022"></xref>.</t>

        <figure anchor="lw4o6-ce-routing-example-xml"
                title="lw4o6 CE Routing Configuration XML">
          <artwork><![CDATA[

<config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <routing xmlns="urn:ietf:params:xml:ns:yang:ietf-routing">
    <control-plane-protocols>
      <control-plane-protocol>
        <type>static</type>
        <name>v4</name>
        <static-routes>
          <ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ipv4-unicast-routing">
            <route>
              <destination-prefix>0.0.0.0/0</destination-prefix>
              <next-hop>
                <outgoing-interface>lw4o6-wan</outgoing-interface>
              </next-hop>
            </route>
          </ipv4>
        </static-routes>
      </control-plane-protocol>
    </control-plane-protocols>
  </routing>
</config>

    ]]></artwork>
        </figure>

        <t>The following section provides example configuration for the CE's
        NAPT44 function, using the YANG model described in <xref
        target="I-D.ietf-opsawg-nat-yang"></xref>.</t>

        <figure anchor="lw4o6-ce-nat-example-xml"
                title="lw4o6 NAT Configuration XML">
          <artwork><![CDATA[
<config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <nat-module xmlns="urn:ietf:params:xml:ns:yang:ietf-nat">
    <nat-instances>
      <nat-instance>
        <id>1</id>
        <nat-policy>
        <policy-id>1</policy-id>
        <external-ip-address-pool>
          <pool-id>1</pool-id>
          <external-ip-pool>192.0.2.1</external-ip-pool>
        </external-ip-address-pool>
        <port-set-restrict>
          <port-set-algo>
            <psid-offset>6</psid-offset>
            <psid-len>8</psid-len>
            <psid>52</psid>
          </port-set-algo>
        </port-set-restrict>
        <notify-pool-usage>
          <notify-pool-hi-threshold>80</notify-pool-hi-threshold>
        </notify-pool-usage>
        </nat-policy>
        <connection-limit>
          <limit-per-icmp>8</limit-per-icmp>
          <limit-per-tcp>32</limit-per-tcp>
          <limit-per-udp>16</limit-per-udp>
          <limit-per-instance>1024</limit-per-instance>
        </connection-limit>
        <logging-info>
          <logging-enable>false</logging-enable>
          <destination-address>127.0.0.1/32</destination-address>
          <destination-port>12345</destination-port>
        </logging-info>
        <mapping-limit>
          <limit-per-icmp>8</limit-per-icmp>
          <limit-per-tcp>32</limit-per-tcp>
          <limit-per-udp>16</limit-per-udp>
          <limit-per-instance>1024</limit-per-instance>
        </mapping-limit>
        <mapping-table>
          <mapping-entry>
            <index>1</index>
            <external-src-address>192.0.2.1/32</external-src-address>
            <internal-src-address>192.168.1.0/24</internal-src-address>
            <transport-protocol>6</transport-protocol>
          </mapping-entry>
          <mapping-entry>
            <index>2</index>
            <external-src-address>192.0.2.1/32</external-src-address>
            <internal-src-address>192.168.1.0/24</internal-src-address>
            <transport-protocol>17</transport-protocol>
          </mapping-entry>
          <mapping-entry>
            <index>3</index>
            <external-src-address>192.0.2.1/32</external-src-address>
            <internal-src-address>192.168.1.0/24</internal-src-address>
            <transport-protocol>1</transport-protocol>
          </mapping-entry>
        </mapping-table>
      </nat-instance>
    </nat-instances>
  </nat-module>
</config>

          ]]></artwork>
        </figure>
      </section>
    </section>
  </back>
</rfc>
